// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Persistence;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    partial class ServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("Server.Models.Cards.CardProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChipId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("card_profile");
                });

            modelBuilder.Entity("Server.Models.Cards.PilotDomain", b =>
                {
                    b.Property<int>("PilotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoadPlayerJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PilotDataGroupJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PilotId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("pilot_domain");
                });

            modelBuilder.Entity("Server.Models.Cards.UserDomain", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MobileUserGroupJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("user_domain");
                });

            modelBuilder.Entity("Server.Models.Cards.PilotDomain", b =>
                {
                    b.HasOne("Server.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("PilotDomain")
                        .HasForeignKey("Server.Models.Cards.PilotDomain", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("Server.Models.Cards.UserDomain", b =>
                {
                    b.HasOne("Server.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("UserDomain")
                        .HasForeignKey("Server.Models.Cards.UserDomain", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("Server.Models.Cards.CardProfile", b =>
                {
                    b.Navigation("PilotDomain")
                        .IsRequired();

                    b.Navigation("UserDomain")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

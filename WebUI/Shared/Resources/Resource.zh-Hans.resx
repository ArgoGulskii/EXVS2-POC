<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="accesscode" xml:space="preserve">
    <value>访问码</value>
  </data>
  <data name="cardid" xml:space="preserve">
    <value>卡 ID</value>
  </data>
  <data name="cards" xml:space="preserve">
    <value>卡组列表</value>
  </data>
  <data name="darktheme" xml:space="preserve">
    <value>切换至暗色模式</value>
  </data>
  <data name="enteraccesscode" xml:space="preserve">
    <value>输入访问码</value>
  </data>
  <data name="fromcardini" xml:space="preserve">
    <value>来自 card.ini</value>
  </data>
  <data name="home" xml:space="preserve">
    <value>主页</value>
  </data>
  <data name="id" xml:space="preserve">
    <value>编号</value>
  </data>
  <data name="lighttheme" xml:space="preserve">
    <value>切换至亮色模式</value>
  </data>
  <data name="mobilesuit" xml:space="preserve">
    <value>机体</value>
  </data>
  <data name="playername" xml:space="preserve">
    <value>用户名</value>
  </data>
  <data name="search" xml:space="preserve">
    <value>搜索</value>
  </data>
  <!-- Card Customization UI -->
  <data name="generalcardinfo" xml:space="preserve">
    <value>基本卡片资料</value>
  </data>
  <data name="navisetting" xml:space="preserve">
    <value>领航员设定</value>
  </data>
  <!-- Favourite MS Setting -->
  <data name="favmssetting" xml:space="preserve">
    <value>偏好机体</value>
  </data>
  <!-- Pilot alternative costumes, done -->
  <data name="mscostumesetting" xml:space="preserve">
    <value>驾驶员换装</value>
  </data>
  <data name="mscostumehint" xml:space="preserve">
    <value>表中不含无换装驾驶员</value>
  </data>
  <data name="mscostumemsheader" xml:space="preserve">
    <value>机动战士</value>
  </data>
  <data name="mscostumecostumeheader" xml:space="preserve">
    <value>衣服</value>
  </data>
  <!-- CPU Triad Setting -->
  <data name="cputriadpartner" xml:space="preserve">
    <value>街机模式CPU队友</value>
  </data>
  <!-- Customize Comment Setting -->
  <data name="customizecomment" xml:space="preserve">
    <value>自定义签名</value>
  </data>
  <!-- Communication Message Setting -->
  <data name="communicationmessage" xml:space="preserve">
    <value>通讯设置</value>
  </data>
  <!-- Game Pad Config, done -->
  <data name="gamepadconfig" xml:space="preserve">
    <value>手柄键位设置</value>
  </data>
  <data name="gamepadhint1" xml:space="preserve">
    <value>键位是基于Xbox及PS手柄</value>
  </data>
  <data name="gamepadhint2" xml:space="preserve">
    <value>对于部分支持XInput / PC模式的街机摇杆也适用 (如Victrix Pro FS)</value>
  </data>
  <data name="gamepadsquare" xml:space="preserve">
    <value>X / □ 键</value>
  </data>
  <data name="gamepadtriangle" xml:space="preserve">
    <value>Y / △ 键</value>
  </data>
  <data name="gamepadcross" xml:space="preserve">
    <value>A / × 键</value>
  </data>
  <data name="gamepadcircle" xml:space="preserve">
    <value>B / ○ 键</value>
  </data>
  <data name="gamepadl1" xml:space="preserve">
    <value>LB / L1 键</value>
  </data>
  <data name="gamepadr1" xml:space="preserve">
    <value>RB / R1 键</value>
  </data>
  <data name="gamepadl2" xml:space="preserve">
    <value>LT / L2 键</value>
  </data>
  <data name="gamepadr2" xml:space="preserve">
    <value>RT / R2 键</value>
  </data>
  <data name="gamepadl3" xml:space="preserve">
    <value>LSB / L3 键</value>
  </data>
  <data name="gamepadr3" xml:space="preserve">
    <value>RSB / R3 键</value>
  </data>
  <!-- View -->
  <data name="viewcarddetailtitle" xml:space="preserve">
    <value>显示玩家资料</value>
  </data>
  <data name="cardviewdetail" xml:space="preserve">
    <value>显示玩家资料</value>
  </data>
  <data name="screencaptures" xml:space="preserve">
    <value>截图</value>
  </data>
</root>
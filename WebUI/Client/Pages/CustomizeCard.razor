@page "/Cards/Customize/{AccessCode}/{ChipId}"
@inject HttpClient Http
@inject ILogger<CustomizeCard> Logger
@inject ISnackbar Snackbar
@inject IDataService DataService
@inject IDialogService DialogService

@using MudBlazor;
@using System.Collections.ObjectModel;
@using WebUI.Client.Pages.Dialogs;
@using WebUI.Shared.Dto.Common;
@using WebUI.Shared.Dto.Enum;
@using WebUI.Shared.Dto.Request;
@using WebUI.Shared.Dto.Response;
@using Throw;
@using global::Shared.Models;

<PageTitle>Customize</PageTitle>
<h1>Customization Options</h1>

@if (errorMessage is not null)
{
    <MudText Color="Color.Error" Typo="Typo.h3">@errorMessage</MudText>
    return;
}

@if (_basicProfile is null)
{
    <MudStack>
        <MudSkeleton Width="100%"/>
        <MudSkeleton Width="100%"/>
        <MudSkeleton Width="100%"/>
        <MudSkeleton Width="100%"/>
        <MudSkeleton Width="100%"/>
        <MudSkeleton Width="100%"/>
    </MudStack>
    return;
}

<MudStack Class="mt-8">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">General Card Info</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" OnClick="@SaveBasicProfile"
                            Color="Color.Primary" Size="Size.Large" aria-label="save"></MudIconButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudStack>
                <MudStack Row>
                    <MudStack Row Class="align-center">
                        <MudToggleIconButton @bind-Toggled="@_switchOpenRecord"
                                             Icon="@Icons.Material.Filled.VisibilityOff" Color="@Color.Error" Title="Off"
                                             ToggledIcon="@Icons.Material.Filled.Visibility" ToggledColor="@Color.Success" ToggledTitle="On" />
                        <span>@(_switchOpenRecord ? "Show" : "Hide") Record </span>
                    </MudStack>
                    <MudStack Row Class="align-center">
                        <MudToggleIconButton @bind-Toggled="@_switchOpenEchelon"
                                             Icon="@Icons.Material.Filled.GridOff" Color="@Color.Error" Title="Off"
                                             ToggledIcon="@Icons.Material.Filled.GridOn" ToggledColor="@Color.Success" ToggledTitle="On" />
                        <span>@(_switchOpenEchelon ? "Show" : "Hide") Rank </span>
                    </MudStack>
                </MudStack>
                <MudItem xs="8">
                    <MudSelect @bind-Value="_basicProfile.DefaultBgmPlayingMethod" Margin="Margin.Dense" T="BgmPlayingMethod"
                               Label="BGM Play Type" Variant="Variant.Outlined" ToStringFunc="@converter">
                        @foreach (var item in Enum.GetValues<BgmPlayingMethod>())
                        {
                            <MudSelectItem Value="@(item)" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="10">
                    <MudGrid Class="align-center">
                        <MudItem xs="10">
                            <MudExpansionPanels>
                                <MudExpansionPanel Text="Bgm List / Order">
                                    <MudSimpleTable Style="overflow-x: auto;">
                                        <tbody>
                                            @if(_basicProfile.DefaultBgmList.Count() > 0)
                                            {
                                                foreach (var x in _basicProfile.DefaultBgmList)
                                                {
                                                    <tr>
                                                        <td>@DataService.GetBgmById(x).NameJP</td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td>No Entries</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </MudSimpleTable>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                           OnClick="() => OpenProfileChangeBgmOrderDialog()" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="10">
                    <MudGrid Class="align-center">
                        <MudItem xs="10">
                            <MudField Label="Gauge UI" Variant="Variant.Outlined" InnerPadding="false">
                                <MudText Class="ma-4" Align="Align.Center">@GetGaugeName(_basicProfile.DefaultGaugeDesignId)</MudText>
                            </MudField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                            OnClick="() => OpenProfileChangeGaugeDialog()" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudStack>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Navigator Profile</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" OnClick="@SaveNavigatorProfile"
                            Color="Color.Primary" Size="Size.Large" aria-label="save"></MudIconButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudStack>
                <MudItem xs="10">
                    <MudGrid Class="align-center">
                        <MudItem xs="10">
                            <MudField Label="UI Navigator" Variant="Variant.Outlined" InnerPadding="false">
                                <MudText Class="ma-4" Align="Align.Center">@GetNaviName(_naviProfile.DefaultUiNaviId)</MudText>
                            </MudField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                           OnClick="() => OpenNaviChangeUIDialog()" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="10">
                    <MudGrid Class="align-center">
                        <MudItem xs="10">
                            <MudField Label="In Battle Navigator" Variant="Variant.Outlined" InnerPadding="false">
                                <MudText Class="ma-4" Align="Align.Center">@GetNaviName(_naviProfile.DefaultBattleNaviId)</MudText>
                            </MudField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                           OnClick="() => OpenNaviChangeBattleDialog()" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Favourite Mobile Suits</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" OnClick="@SaveFavouriteMobileSuits"
                               Color="Color.Primary" Size="Size.Large" aria-label="save"></MudIconButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudStack Row>
                <MudButton OnClick="@AddFavouriteMobileSuitItem" Variant="Variant.Filled" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>
            </MudStack>
            <MudStack>
                <MudDataGrid @ref="_favMsDataGrid"
                    Items="@_favouriteMs"
                    Filterable="false"
                    ReadOnly="false"
                    EditMode="@(DataGridEditMode.Cell)"
                    EditTrigger="@(DataGridEditTrigger.OnRowClick)"
                    SortMode="@SortMode.None"
                    Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.MsId" IsEditable="true" Title="Mobile Suit">
                        <EditTemplate>
                            <MudGrid Class="align-center">
                                <MudItem xs="9">
                                    <MudText Align="Align.Center">@GetMobileSuitName(context.Item.MsId)</MudText>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                                    OnClick="() => OpenChangeFavouriteMsDialog(context.Item)" />
                                </MudItem>
                            </MudGrid>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.BurstType" Title="Burst Type">
                        <EditTemplate>
                            <MudStack Row>
                                <MudSelect @bind-Value="context.Item.BurstType" T="BurstType" Variant="Variant.Outlined">
                                    @foreach (var item in Enum.GetValues<BurstType>())
                                    {
                                        <MudSelectItem Value="item">@item.ToString()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudStack>
                    </EditTemplate>
                </PropertyColumn>
                    <PropertyColumn Property="x => x.BattleNaviId" Title="In Battle Navi">
                        <EditTemplate>
                            <MudGrid Class="align-center">
                                <MudItem xs="9">
                                    <MudText Align="Align.Center">@GetNaviName(context.Item.BattleNaviId)</MudText>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                                   OnClick="() => OpenFavMsChangeNaviDialog(context.Item)" />
                                </MudItem>
                            </MudGrid>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.GaugeDesignId" Title="Gauge UI">
                        <EditTemplate>
                            <MudGrid Class="align-center">
                                <MudItem xs="9">
                                    <MudText Align="Align.Center">@GetGaugeName(context.Item.GaugeDesignId)</MudText>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                                   OnClick="() => OpenFavMsChangeGaugeDialog(context.Item)" />
                                </MudItem>
                            </MudGrid>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.BgmList" IsEditable="false" Title="Bgm Order">
                        <CellTemplate>
                            <MudGrid Class="align-center">
                                <MudItem xs="10">
                                    <MudExpansionPanels>
                                        <MudExpansionPanel Text="Order">
                                            <MudSimpleTable Style="overflow-x: auto;">
                                                <tbody>
                                                    @if (context.Item.BgmList.Count() > 0)
                                                    {
                                                        foreach (var x in context.Item.BgmList)
                                                        {
                                                            <tr>
                                                                <td>@DataService.GetBgmById(x).NameJP</td>
                                                            </tr>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <tr>
                                                            <td>No Entries</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </MudSimpleTable>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                </MudItem>
                                <MudItem xs="2">
                                    <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                                                   OnClick="() => OpenFavMsChangeBgmOrderDialog(context.Item)" />
                                </MudItem>
                            </MudGrid>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.BgmPlayingMethod" Title="BGM Play Type">
                        <EditTemplate>
                            <MudStack Row>
                                <MudSelect @bind-Value="context.Item.BgmPlayingMethod" T="BgmPlayingMethod" Variant="Variant.Outlined">
                                    @foreach (var item in Enum.GetValues<BgmPlayingMethod>())
                                    {
                                        <MudSelectItem Value="item">@item.ToString()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudStack>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x">
                        <EditTemplate>
                                <MudIconButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error"
                                               Icon="@Icons.Material.Filled.Delete" OnClick="() => RemoveFavouriteUnit(context)"></MudIconButton>
                        </EditTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
            </MudStack>
        </MudCardContent>
    </MudCard>
    
</MudStack>

@code{

    [Parameter]
    public string ChipId { get; set; } = string.Empty;
    [Parameter]
    public string AccessCode { get; set; } = string.Empty;

    private MudDataGrid<FavouriteMs> _favMsDataGrid;

    private BasicProfile? _basicProfile;
    private NaviProfile? _naviProfile;
    private ObservableCollection<FavouriteMs>? _favouriteMs = new ObservableCollection<FavouriteMs>();

    private string? errorMessage;

    private readonly int _maximumFavouriteMs = 6;

    public BgmPlayingMethod SelecteddefaultBgmPlayingMethod { get; set; }
    public bool _switchOpenRecord { get; set; }
    public bool _switchOpenEchelon { get; set; }

    private readonly List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Cards", href: "/Cards"),
    };

    private static readonly DialogOptions OPTIONS = new()
    {
        CloseOnEscapeKey = false,
        DisableBackdropClick = true,
        FullWidth = true,
        MaxWidth = MaxWidth.ExtraExtraLarge
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        breadcrumbs.Add(new BreadcrumbItem($"Card: {ChipId}", href: null, disabled: true));
        breadcrumbs.Add(new BreadcrumbItem("Option", href: $"/Cards/Customize/{AccessCode}/{ChipId}", disabled: false));

        var profileResult = await Http.GetFromJsonAsync<BasicProfile>($"/card/getBasicDisplayProfile/{AccessCode}/{ChipId}");
        profileResult.ThrowIfNull();

        var naviResult = await Http.GetFromJsonAsync<NaviProfile>($"/card/getNaviProfile/{AccessCode}/{ChipId}");
        naviResult.ThrowIfNull();

        var favouriteResult = await Http.GetFromJsonAsync<List<FavouriteMs>>($"/card/getAllFavouriteMs/{AccessCode}/{ChipId}");
        favouriteResult.ThrowIfNull();

        var json = System.Text.Json.JsonSerializer.Serialize(naviResult);
        Logger.LogInformation($"{json}");

        _basicProfile = profileResult;
        _naviProfile = naviResult;
        _favouriteMs = new ObservableCollection<FavouriteMs>(favouriteResult);

        _switchOpenRecord = Convert.ToBoolean(_basicProfile.OpenRecord);
        _switchOpenEchelon = Convert.ToBoolean(_basicProfile.OpenEchelon);
    }

    Func<BgmPlayingMethod, string> converter = p => p.ToString();

    private string GetMobileSuitName(uint id)
    {
        var navigator = DataService.GetMobileSuitById(id);

        return navigator?.NameEN ?? "Unknown Mobile Suit";
    }

    private string GetNaviName(uint id)
    {
        var navigator = DataService.GetNavigatorById(id);

        return navigator?.NameEN ?? "Unknown Navigator";
    }

    private string GetGaugeName(uint id)
    {
        var navigator = DataService.GetGaugeById(id);

        return navigator?.NameEN ?? "Unknown Gauge";
    }

    private void AddFavouriteMobileSuitItem()
    {
        if (_favouriteMs.Count() > _maximumFavouriteMs)
        {
            Snackbar.Add($"Cannot add more than {_maximumFavouriteMs} entries!", Severity.Warning);
            return;
        }

        var newTitle = new Title
            {
                TextId = 1,
                OrnamentId = 1,
                EffectId = 1,
                BackgroundPartsId = 1
            };

        var newItem = new FavouriteMs
            {
                MsId = 1,
                GaugeDesignId = 1,
                BgmPlayingMethod = BgmPlayingMethod.None,
                BgmList = new uint[] { },
                BattleNaviId = 1,
                BurstType = BurstType.Covering,
                DefaultTitle = newTitle,
                TriadTitle = newTitle,
                RankingTitle = newTitle
            };

        _favouriteMs.Add(newItem);
    }

    private void RemoveFavouriteUnit(CellContext<FavouriteMs> cellContext)
    {
        var itemHashCode = cellContext.Item.GetHashCode();
        var item = _favouriteMs.FirstOrDefault(x => x.GetHashCode() == itemHashCode);

        if (item != null)
            _favouriteMs.Remove(item);
    }

    private async Task OpenProfileChangeBgmOrderDialog()
    {
        var parameters = new DialogParameters { { "Data", _basicProfile.DefaultBgmList } };
        var dialog = await DialogService.ShowAsync<ChangeBgmOrderDialog>("Add / Change Bgm Order", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _basicProfile.DefaultBgmList = result.Data as uint[];
            StateHasChanged();
        }
    }

    private async Task OpenProfileChangeGaugeDialog()
    {
        var parameters = new DialogParameters { { "Data", new uint[] { _basicProfile.DefaultGaugeDesignId } } };
        var dialog = await DialogService.ShowAsync<ChangeGaugeDialog>("Change Gauge UI", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _basicProfile.DefaultGaugeDesignId = (result.Data as uint[]).FirstOrDefault();
            StateHasChanged();
        }
    }

    private async Task OpenNaviChangeUIDialog()
    {
        var parameters = new DialogParameters { { "Data", new uint[] { _naviProfile.DefaultUiNaviId } } };
        var dialog = await DialogService.ShowAsync<ChangeNavigatorDialog>("Change UI navigator", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _naviProfile.DefaultUiNaviId = (result.Data as uint[]).FirstOrDefault();
            StateHasChanged();
        }
    }

    private async Task OpenNaviChangeBattleDialog()
    {
        var parameters = new DialogParameters { { "Data", new uint[] { _naviProfile.DefaultBattleNaviId } } };
        var dialog = await DialogService.ShowAsync<ChangeNavigatorDialog>("Change in battle navigator", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _naviProfile.DefaultBattleNaviId = (result.Data as uint[]).FirstOrDefault();
            StateHasChanged();
        }
    }

    private async Task OpenChangeFavouriteMsDialog(FavouriteMs item)
    {
        var index = _favouriteMs?.IndexOf(item);

        if (index == -1 || index == null)
            throw new ArgumentException("Selected item is not part of the provided items list.");

        var parameters = new DialogParameters { { "Data", item.MsId } };
        var dialog = await DialogService.ShowAsync<ChangeMobileSuitDialog>("Change favourite mobile suit", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _favouriteMs[index.Value].MsId = (uint)result.Data;
            StateHasChanged();
        }
    }

    private async Task OpenFavMsChangeBgmOrderDialog(FavouriteMs item)
    {
        var index = _favouriteMs?.IndexOf(item);

        if (index == -1 || index == null)
            throw new ArgumentException("Selected item is not part of the provided items list.");

        var parameters = new DialogParameters { { "Data", item.BgmList } };
        var dialog = await DialogService.ShowAsync<ChangeBgmOrderDialog>("Add / Change bgm order", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _favouriteMs[index.Value].BgmList = result.Data as uint[];
            StateHasChanged();
        }
    }

    private async Task OpenFavMsChangeNaviDialog(FavouriteMs item)
    {
        var index = _favouriteMs?.IndexOf(item);

        if (index == -1 || index == null)
            throw new ArgumentException("Selected item is not part of the provided items list.");

        var parameters = new DialogParameters { { "Data", new uint[] { item.BattleNaviId } } };
        var dialog = await DialogService.ShowAsync<ChangeNavigatorDialog>("Change in battle navigator", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _favouriteMs[index.Value].BattleNaviId = (result.Data as uint[]).FirstOrDefault();
            StateHasChanged();
        }
    }

    private async Task OpenFavMsChangeGaugeDialog(FavouriteMs item)
    {
        var index = _favouriteMs?.IndexOf(item);

        if (index == -1 || index == null)
            throw new ArgumentException("Selected item is not part of the provided items list.");

        var parameters = new DialogParameters {{ "Data", new uint[] { item.GaugeDesignId }}};
        var dialog = await DialogService.ShowAsync<ChangeGaugeDialog>("Change gauge UI", parameters, OPTIONS);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            _favouriteMs[index.Value].GaugeDesignId = (result.Data as uint[]).FirstOrDefault();
            StateHasChanged();
        }
    }

    private async Task SaveBasicProfile()
    {
        var dto = new UpdateBasicProfileRequest()
        {
            AccessCode = AccessCode,
            ChipId = ChipId,
            BasicProfile = _basicProfile
        };

        var json = System.Text.Json.JsonSerializer.Serialize(dto);
        Logger.LogInformation($"{json}");

        var response = await Http.PostAsJsonAsync("/card/updateBasicProfile", dto);
        var result = await response.Content.ReadFromJsonAsync<BasicResponse>();
        result.ThrowIfNull();

        if (result.Success)
            Snackbar.Add("Update successful!", Severity.Success);
        else
            Snackbar.Add("Update failed!", Severity.Error);

        return;
    }

    private async Task SaveNavigatorProfile()
    {
        var dto = new UpsertDefaultNaviRequest()
        {
            AccessCode = AccessCode,
            ChipId = ChipId,
            DefaultBattleNaviId = _naviProfile.DefaultBattleNaviId,
            DefaultUiNaviId = _naviProfile.DefaultUiNaviId,
        };

        var response = await Http.PostAsJsonAsync("/card/upsertDefaultNavi", dto);
        var result = await response.Content.ReadFromJsonAsync<BasicResponse>();
        result.ThrowIfNull();

        if (result.Success)
            Snackbar.Add("Update successful!", Severity.Success);
        else
            Snackbar.Add("Update failed!", Severity.Error);

        return;
    }

    private async Task SaveFavouriteMobileSuits()
    {
        var dto = new UpdateAllFavouriteMsRequest()
        {
            AccessCode = AccessCode,
            ChipId = ChipId,
            FavouriteMsList = _favouriteMs.ToList()
        };

        var response = await Http.PostAsJsonAsync("/card/updateAllFavouriteMs", dto);
        var result = await response.Content.ReadFromJsonAsync<BasicResponse>();
        result.ThrowIfNull();

        if (result.Success)
            Snackbar.Add("Update successful!", Severity.Success);
        else
            Snackbar.Add("Update failed!", Severity.Error);

        return;
    }
}
@page "/Cards"
@inject HttpClient Http

@using MudBlazor;
@using System.Net.Http.Json;
@using System.Text;
@using WebUI.Shared.Dto.Response;
@using WebUI.Client.Pages.Dialogs;
@inject IDialogService DialogService;

@inject ILogger<Cards> Logger

<PageTitle>Cards</PageTitle>

<h1>@localizer["cards"]</h1>

@*@if (ErrorMessage != string.Empty)
{
    <MudText Color="Color.Error" Typo="Typo.h3">@ErrorMessage</MudText>
    return;
}*@
<MudGrid Class="my-8">
    <MudItem xs="12">
        <MudTextField @ref="mudTextField" @bind-Value="_searchText" Label="@localizer["search"]" Variant="Variant.Outlined" Immediate="true" TextChanged="SearchEntered" />
    </MudItem>
    
    @if (cardDtos is null)
    {
        @for (var i = 0; i < 3; i++)
        {
            <MudItem xs="12" md="6" lg="4">
                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudSkeleton Width="30%" Height="32px;" Class="mb-5"/>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudSkeleton Width="60%"/>
                        <MudSkeleton Width="100%"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudStack Row="true" Style="width:100%" Spacing="4" Justify="Justify.FlexEnd">
                            <MudSkeleton Width="128px" Height="32px"/>
                            <MudSkeleton Width="148px" Height="32px"/>
                        </MudStack>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        return;
    }
    
            @if (cardDtos.Count != 0)
            {
                @foreach (var card in cardDtos)
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="4">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">@ObfuscateName(card.UserName)</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Style="font-weight: bold">@localizer["cardid"]</MudText>
                                <MudText Style="font-family:monospace">@card.ChipId</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudStack Row="true" Style="width:100%" Spacing="4" Justify="Justify.FlexEnd">
                                    <MudButton OnClick="() => OnEditCardClicked(card)"
                                               Variant="Variant.Text"
                                               StartIcon="@Icons.Material.Filled.DisplaySettings"
                                               Color="Color.Primary">
                                    @localizer["cardseditoptions"]
                                    </MudButton>
                                </MudStack>
                                <MudStack Row="true" Style="width:100%" Spacing="4" Justify="Justify.FlexEnd">
                                    <MudButton OnClick="() => OnViewDetailClicked(card)"
                                               Variant="Variant.Text"
                                               StartIcon="@Icons.Material.Filled.Info"
                                               Color="Color.Primary">
                                        @localizer["cardviewdetail"]
                                    </MudButton>
                                </MudStack>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
                return;
            }
            else
            {
                <MudItem xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h3">
                        No Data
                    </MudText>
                </MudItem>
            }
</MudGrid>

@code{
    private List<BareboneCardProfile>? cardDtos;

    private List<BareboneCardProfile>? originalCardDtos;

    private MudTextField<string> mudTextField { get; set; }

    private string _searchText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cardDtos = await Http.GetFromJsonAsync<List<BareboneCardProfile>>("card/getAll");

        originalCardDtos = cardDtos;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mudTextField.HelperText = $"{localizer["cardid"]}";
            StateHasChanged();
        }
    }

    private async Task OnEditCardClicked(BareboneCardProfile card)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                DisableBackdropClick = true,
                FullWidth = true
            };
        var parameters = new DialogParameters
        {
            { "Data", card },
            { "Mode", "EditCard"}
        };
        var dialog = await DialogService.ShowAsync<CardAuthDialog>("Authorization", parameters, options);
        // ReSharper disable once UnusedVariable
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    private async Task OnViewDetailClicked(BareboneCardProfile card)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
            FullWidth = true
        };
        var parameters = new DialogParameters
        {
            { "Data", card },
            { "Mode", "ViewDetail"}
        };
        var dialog = await DialogService.ShowAsync<CardAuthDialog>("Authorization", parameters, options);
        // ReSharper disable once UnusedVariable
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    private void SearchEntered(string input)
    {
        cardDtos = originalCardDtos.Where(x => x.ChipId.Contains(input)).ToList();
        StateHasChanged();
    }

    private string ObfuscateName(string name)
    {
        int minLength = 3;
        string obfuscationChar = "*";

        if (string.IsNullOrEmpty(name))
        {
            return new string('*', minLength);
        }

        int fillCount = Math.Max(minLength - name.Length, 0);
        string filledInput = name.PadRight(minLength, obfuscationChar[0]);

        string prefix = filledInput.Substring(0, minLength);
        string obfuscatedPart = new string('*', 7);

        StringBuilder resultBuilder = new StringBuilder(minLength + obfuscatedPart.Length);
        resultBuilder.Append(prefix);
        resultBuilder.Append(obfuscatedPart);

        return resultBuilder.ToString();
    }
}
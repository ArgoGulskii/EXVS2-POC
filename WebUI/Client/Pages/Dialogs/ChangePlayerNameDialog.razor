@inject HttpClient Http
@inject ILogger<ChangePlayerNameDialog> Logger
@inject ISnackbar Snackbar

@using System.Text.RegularExpressions;
@using WebUI.Shared.Dto.Common;
@using WebUI.Shared.Dto.Request;
@using WebUI.Shared.Dto.Response;
@using Throw;

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Change player name
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="IsValid">
            <MudTextField Value="@Data.ChipId" Label="CardId" ReadOnly="true" />
            <MudTextField @bind-Value="Data.UserName"
                          Immediate="true"
                          Counter="PLAYER_NAME_MAX_LENGTH"
                          MaxLength="PLAYER_NAME_MAX_LENGTH"
                          Validation="ValidatePlayerName" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!IsValid)">Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public BareboneCardProfile Data { get; set; } = null!;

    private string originalName = string.Empty;

    private bool IsValid { get; set; }

    private const int PLAYER_NAME_MAX_LENGTH = 12;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        originalName = new string(Data.UserName);
    }

    async Task Submit()
    {
        if (originalName.Equals(Data.UserName))
        {
            MudDialog.Close(DialogResult.Ok(true));
            return;
        }

        // before updating, query profile to be POSTed to card/updateBasicProfile endpoint
        // Logger.LogInformation($"Querying profile for {Data.AccessCode}/{Data.ChipId} before POSTing update.");
        var profileResponse = await Http.GetFromJsonAsync<BasicProfile>($"/card/getBasicDisplayProfile/{Data.AccessCode}/{Data.ChipId}");
        profileResponse.ThrowIfNull();

        profileResponse.UserName = Data.UserName;
        var newProfile = new UpdateBasicProfileRequest()
        {
            AccessCode = Data.AccessCode,
            ChipId = Data.ChipId,
            BasicProfile = profileResponse
        };

        var response = await Http.PostAsJsonAsync("card/updateBasicProfile", newProfile);
        var result = await response.Content.ReadFromJsonAsync<BasicResponse>();
        result.ThrowIfNull();

        if (result.Success)
            Snackbar.Add("Username updated!", Severity.Success);
        else
            Snackbar.Add("Username update failed!", Severity.Error);

        MudDialog.Close(DialogResult.Ok(result));
    }

    void Cancel()
    {
        Data.UserName = originalName;
        MudDialog.Cancel();
    }

    private static string? ValidatePlayerName(string playerName)
    {
        const string pattern = @"^[ 一-龯ぁ-んァ-ンｧ-ﾝﾞﾟa-zA-Z0-9ａ-ｚＡ-Ｚ０-９ー＜＞＋－＊÷＝；：←／＼＿｜・＠！？＆★（）＾◇∀Ξν×†ω♪♭#∞〆→↓↑％※ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ☆◆\[\]「」『』【】]{1,12}$";

        return playerName.Length switch
        {
            0 => "Player name cannot be empty!",
            > PLAYER_NAME_MAX_LENGTH => "Player name cannot be longer than 12 characters!",
            _ => !Regex.IsMatch(playerName, pattern) ? "Player name contains invalid character!" : null
        };
    }
}
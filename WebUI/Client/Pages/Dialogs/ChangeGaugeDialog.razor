@inject IDataService DataService
@using Server.Dto.Response;
@using WebUI.Shared.Dto.Common;
@using WebUI.Shared.Dto.Json;
@inject ILogger<ChangeGaugeDialog> Logger
@inject ISnackbar Snackbar

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<MudDialog>
    <DialogContent>
        <MudTable Items="@_list" Filter="@Filter" @ref="mudTable" OnRowClick="@OnRowClick" RowClassFunc="@SelectedRowClassFunc" T="Gauge" Hover="true" FixedHeader="true">
            <ColGroup>
                <col style="width: 50px;" />
                <col />
            </ColGroup>
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="false"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.Id))">
                        Id
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.NameEN))">
                        Name (English)
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.NameJP))">
                        Name (Japanese)
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.NameCN))">
                        Name (Chinese)
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
#pragma warning disable CS8602
                }
                <MudTd DataLabel="Id" Class="cursor-pointer">@context.Id</MudTd>
                <MudTd DataLabel="NameEN" Class="cursor-pointer">@context.NameEN</MudTd>
                <MudTd DataLabel="NameJP" Class="cursor-pointer">@context.NameJP</MudTd>
                <MudTd DataLabel="NameCN" Class="cursor-pointer">@context.NameCN</MudTd>
                @{
#pragma warning restore CS8602
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@_pageSizeOptions" />
            </PagerContent>
        </MudTable>
        <MudText Class="mt-4 d-block" Typo="Typo.caption">
            @if(_selectedItems != null)
            {
                <b>Selected Gauge:</b>
                @foreach (var selectItem in _selectedItems)
                {
                    <b> @selectItem?.NameEN | </b>
                }
            }
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public uint[] Data { get; set; }

    [Parameter]
    public int MultiSelectCountLimit { get; set; } = 1;

    private HashSet<Gauge> _selectedItems = new HashSet<Gauge>();

    private int _selectedPage;

    private IReadOnlyList<Gauge> _list = new List<Gauge>();

    private string _searchString = string.Empty;

    private int[] _pageSizeOptions = new int[] { 5, 10, 25, 50, 100 };

    private MudTable<Gauge> mudTable;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _list = DataService.GetGaugeSortedById();
        foreach (var selectData in Data)
        {
            var data = DataService.GetGaugeById(selectData);
            _selectedItems.Add(data);
        }
        var firstPageOption = _pageSizeOptions.ToList().FirstOrDefault();
        _selectedPage = CalculateCurrentPage(_list, _selectedItems.FirstOrDefault(), firstPageOption);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_selectedItems != null && firstRender)
            mudTable.CurrentPage = _selectedPage;
    }

    private int CalculateCurrentPage<T>(IEnumerable<T> items, T selectedItem, int rowsPerPage)
    {
        // Convert the IEnumerable to a list for better performance (if it's not already a list).
        List<T> itemList = items.ToList();

        // Find the index of the selected item in the list.
        int selectedIndex = itemList.IndexOf(selectedItem);

        if (selectedIndex < 0)
        {
            // The selected item is not found in the list.
            Logger.LogError("Selected item is not part of the provided items list.");
        }

        // Calculate the current page using integer division.
        int currentPage = selectedIndex / rowsPerPage;

        return currentPage;
    }

    private bool Filter(Gauge? item)
    {
        if (item is null)
        {
            return false;
        }
        var aggregate = $"{item.NameEN}{item.NameJP}{item.NameCN}";
        return string.IsNullOrEmpty(_searchString) ||
               aggregate.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void Submit()
    {
        if (_selectedItems is not null)
            Data = _selectedItems.Select(x => x.Id).ToArray();

        MudDialog.Close(DialogResult.Ok(Data));
    }

    private void Cancel() => MudDialog.Cancel();

    private string SelectedRowClassFunc(Gauge element, int rowNumber)
    {
        if (_selectedItems.Contains(element))
            return "selected";
        else
            return string.Empty;
    }

    private void OnRowClick(TableRowClickEventArgs<Gauge> args)
    {
        if (_selectedItems.Any(x => x.Id == args.Item.Id))
        {
            _selectedItems.RemoveWhere(x => x.Id == args.Item.Id);
        }
        else
        {
            if (_selectedItems.Count() >= MultiSelectCountLimit)
            {
                if (MultiSelectCountLimit == 1)
                {
                    _selectedItems.Clear();
                    _selectedItems.Add(args.Item);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Cannot select more than {MultiSelectCountLimit} entries! \r\n Please de-select existing entries before you select a new entry.", Severity.Warning);
                    return;
                }
            }
            _selectedItems.Add(args.Item);
        }

        StateHasChanged();
    }
}